[tool.poetry]
name = "pNeuma-simulator"
version = "0.0.0"
description = "A Python package for the pNeuma simulator."
authors = ["Georg Anagnostopoulos, <georgios.anagnostopoulos@epfl.ch>"]
readme = "README.md"
keywords = ["python"]
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Operating System :: Unix",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
]
packages = [{include = "pNeuma_simulator"}]
homepage = "https://github.com/EPFL-ENAC/LUTS-pneuma-simulator"
repository = "https://github.com/EPFL-ENAC/LUTS-pneuma-simulator"
documentation = "https://pneuma-simulator.readthedocs.io/en/latest/"

[build-system]
requires = [
    "poetry-core",
    "poetry-dynamic-versioning>=1.0.0,<2.0.0"
]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.poetry-dynamic-versioning.substitution]
files = [
	"pNeuma_simulator/__init__.py",
]

[tool.poetry.dependencies]
python = ">=3.10"
click = "*"
jupyter = "*"
numpy = "<2"
matplotlib = "<=3.6.2"
joblib = "<=1.2.0"
scipy = "^1.14.0"
tqdm = "^4.66.5"
ipython = "^8.26.0"
numba = "<=0.58.1"
myst-parser = "^4.0.0"
pytest = {version = "^8.3.2", optional = true}
pytest-cov = {version = "^5.0.0", optional = true}
pytest-mock = {version = "^3.14.0", optional = true}
pre-commit = {version = "3.3.1", optional = true}
black = {version = "^24.3.0", optional = true}
ruff = {version = "0.2.0", optional = true}
mypy = {version = "^1.11.2", optional = true}
sphinx = {version = "<8", optional = true}
sphinx-rtd-theme = {version = "^2.0.0", optional = true}
nbsphinx = {version = "^0.9.5", optional = true}
sphinx-pyproject = {version = "^0.3.0", optional = true}
sphinx-mdinclude = {version = "^0.6.2", optional = true}

[tool.poetry.extras]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "black",
    "ruff",
    "mypy",
    "sphinx",
    "sphinx-rtd-theme",
    "nbsphinx",
    "sphinx-pyproject",
    "sphinx-mdinclude"
]
docs = [
  "sphinx",
  "sphinx-rtd-theme",
  "nbsphinx",
  "sphinx-pyproject",
  "sphinx-mdinclude"
]

# Linter settings
[tool.ruff]
lint.select = ["F",
	  "E",
	  "I",
	  "Q",
	  "W",
	  "UP",
	  # "SIM",
	  # "PTH",
	  # "RET",
]
lint.ignore = ["E722"]
line-length = 120
# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
lint.unfixable = []

# Code formatter
[tool.black]
line-length = 120
preview = true

# Tests
[tool.coverage.run]
omit = []
[tool.pytest.ini_options]
addopts = "--cov --cov-report html --cov-report term-missing --cov-fail-under 5"

# Type checking
[tool.mypy]
# Specify the Python version you are using
python_version = "3.12"
# avoid folder
# Exclude specific files or directories from type checking
# Example:
# exclude = ["tests"]
exclude = ["tests","build","venv"]
disallow_untyped_defs = false
warn_unused_ignores = true
warn_unused_configs = true
warn_no_return = true
warn_return_any = false
warn_unreachable = true
show_error_codes = true
pretty = true

[tool.sphinx-pyproject]
github_username = ""
github_repository = ""
author = ""
project = ""
copyright = ""
language = "en"
package_root = ""
extensions = [
	"sphinx.ext.napoleon",
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.autosectionlabel",
    "nbsphinx",
    "sphinx_mdinclude",
	"sphinx.ext.autosummary",
    "myst_parser"
]
html_theme = "sphinx_rtd_theme"

[tool.codespell]
ignore-words-list = "socio-economic, checkin, infront"
